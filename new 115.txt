<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profit & Zakat Tracker</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4efe9 100%);
            color: #333;
            line-height: 1.6;
            padding: 20px;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header-content {
            flex: 1;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .description {
            color: #7f8c8d;
            max-width: 800px;
            margin: 0 auto;
        }
        
        .sharing-section {
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            text-align: center;
        }
        
        .share-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 15px;
            flex-wrap: wrap;
        }
        
        .share-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 20px;
            border-radius: 5px;
            color: white;
            text-decoration: none;
            font-weight: 600;
            transition: transform 0.3s;
        }
        
        .share-btn:hover {
            transform: translateY(-2px);
        }
        
        .whatsapp {
            background: #25D366;
        }
        
        .telegram {
            background: #0088cc;
        }
        
        .link {
            background: #3498db;
        }
        
        .calendar-section {
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            text-align: center;
        }
        
        .calendar-nav {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            margin-bottom: 15px;
        }
        
        .calendar-nav button {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .calendar-nav button:hover {
            background: #2980b9;
        }
        
        .calendar-nav span {
            font-size: 1.2em;
            font-weight: 600;
            color: #2c3e50;
            min-width: 180px;
            text-align: center;
        }
        
        .days-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 10px;
        }
        
        .day-header {
            padding: 10px;
            text-align: center;
            font-weight: 600;
            color: #2c3e50;
            background: #f8f9fa;
            border-radius: 5px;
        }
        
        .day-cell {
            padding: 12px;
            text-align: center;
            background: #f8f9fa;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
            min-height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .day-cell:hover {
            background: #e9ecef;
            transform: translateY(-2px);
        }
        
        .day-cell.selected {
            background: #3498db;
            color: white;
            font-weight: 600;
        }
        
        .day-cell.has-data {
            background: #d4edda;
            border: 2px solid #28a745;
        }
        
        .day-cell.today {
            border: 2px solid #ffc107;
        }
        
        .day-cell.empty {
            background: transparent;
            cursor: default;
        }
        
        .tracker-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        @media (max-width: 992px) {
            .tracker-container {
                grid-template-columns: 1fr;
            }
        }
        
        .input-section, .summary-section {
            background: #fff;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        input, select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            transition: border 0.3s;
        }
        
        input:focus, select:focus {
            outline: none;
            border-color: #3498db;
        }
        
        button {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: background 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        button:hover {
            background: #2980b9;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        .summary-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #3498db;
        }
        
        .summary-item.zakat {
            border-left-color: #27ae60;
        }
        
        .summary-item.sadaka {
            border-left-color: #9b59b6;
        }
        
        .summary-item.total {
            border-left-color: #e74c3c;
            grid-column: span 2;
        }
        
        .summary-item .label {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 5px;
            font-size: 0.9em;
        }
        
        .summary-item .value {
            font-weight: 700;
            font-size: 1.4em;
            color: #27ae60;
        }
        
        .summary-item .rate {
            color: #e74c3c;
        }
        
        .charts {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        @media (max-width: 768px) {
            .charts {
                grid-template-columns: 1fr;
            }
        }
        
        .chart-container {
            background: #fff;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            height: 350px;
        }
        
        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background: #fff;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        
        th {
            background-color: #3498db;
            color: white;
            font-weight: 600;
            position: sticky;
            top: 0;
        }
        
        tr:hover {
            background-color: #f5f7fa;
        }
        
        .table-container {
            max-height: 400px;
            overflow-y: auto;
            margin-bottom: 30px;
            border-radius: 10px;
        }
        
        footer {
            text-align: center;
            margin-top: 40px;
            color: #7f8c8d;
            font-size: 14px;
        }
        
        .positive {
            color: #27ae60;
        }
        
        .negative {
            color: #e74c3c;
        }
        
        .action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        
        .btn-save {
            background: #2ecc71;
        }
        
        .btn-save:hover {
            background: #27ae60;
        }
        
        .btn-reset {
            background: #e74c3c;
        }
        
        .btn-reset:hover {
            background: #c0392b;
        }
        
        .btn-export {
            background: #9b59b6;
        }
        
        .btn-export:hover {
            background: #8e44ad;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            background: #2ecc71;
            color: white;
            border-radius: 5px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            z-index: 1000;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        .notification.error {
            background: #e74c3c;
        }
        
        .storage-info {
            background: #fff;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .storage-info span {
            font-weight: 600;
            color: #2c3e50;
        }
        
        .storage-info .value {
            color: #27ae60;
        }
        
        .instructions {
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        
        .instructions h2 {
            color: #2c3e50;
            margin-bottom: 15px;
        }
        
        .instructions ol {
            margin-left: 20px;
            margin-bottom: 15px;
        }
        
        .instructions li {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="header-content">
                <h1><i class="fas fa-calculator"></i> Profit & Zakat Tracker</h1>
                <p class="description">Track your daily profits, zakat, and sadaka with calendar-based data selection and real-time storage</p>
            </div>
            <div id="currentDateTime" style="font-weight: 600; color: #2c3e50;"></div>
        </header>
        
        <div class="sharing-section">
            <h2><i class="fas fa-share-alt"></i> Share this App</h2>
            <p>Share this app with your friends and family so they can also track their profits and zakat</p>
            <div class="share-buttons">
                <a href="#" class="share-btn whatsapp" id="whatsappShare">
                    <i class="fab fa-whatsapp"></i> WhatsApp
                </a>
                <a href="#" class="share-btn telegram" id="telegramShare">
                    <i class="fab fa-telegram"></i> Telegram
                </a>
                <button class="share-btn link" id="copyLink">
                    <i class="fas fa-link"></i> Copy Link
                </button>
            </div>
        </div>
        
        <div class="instructions">
            <h2><i class="fas fa-info-circle"></i> How to Use</h2>
            <ol>
                <li>Select a date from the calendar</li>
                <li>Enter your daily profit, zakat rate, and any sadaka amount</li>
                <li>Click "Save Data" to store your information</li>
                <li>View your financial summary and charts below</li>
                <li>Use the "Export Data" button to download your records as CSV</li>
                <li>Share this app with others using the share buttons above</li>
            </ol>
            <p><strong>Note:</strong> All data is stored locally in your browser and remains private.</p>
        </div>
        
        <div class="storage-info">
            <span>Data Storage: <span id="storageStatus" class="value">Local Storage</span></span>
            <span>Records: <span id="recordCount" class="value">0</span></span>
        </div>
        
        <div class="calendar-section">
            <h2><i class="fas fa-calendar-alt"></i> Select Date</h2>
            <div class="calendar-nav">
                <button id="prevMonth"><i class="fas fa-chevron-left"></i> Previous</button>
                <span id="currentMonthYear">June 2023</span>
                <button id="nextMonth">Next <i class="fas fa-chevron-right"></i></button>
            </div>
            <div class="days-grid">
                <div class="day-header">Sun</div>
                <div class="day-header">Mon</div>
                <div class="day-header">Tue</div>
                <div class="day-header">Wed</div>
                <div class="day-header">Thu</div>
                <div class="day-header">Fri</div>
                <div class="day-header">Sat</div>
                <!-- Days will be generated here -->
            </div>
        </div>
        
        <div class="tracker-container">
            <div class="input-section">
                <h2><i class="fas fa-edit"></i> Daily Input</h2>
                <div class="form-group">
                    <label for="selectedDate">Selected Date</label>
                    <input type="text" id="selectedDate" readonly>
                </div>
                <div class="form-group">
                    <label for="dailyProfit"><i class="fas fa-rupee-sign"></i> Daily Profit (₹)</label>
                    <input type="number" id="dailyProfit" placeholder="Enter daily profit amount">
                </div>
                <div class="form-group">
                    <label for="zakatRate"><i class="fas fa-percentage"></i> Zakat Rate (%)</label>
                    <input type="number" id="zakatRate" value="2.5" step="0.1">
                </div>
                <div class="form-group">
                    <label for="sadakaAmount"><i class="fas fa-hand-holding-heart"></i> Sadaka Amount (₹)</label>
                    <input type="number" id="sadakaAmount" placeholder="Enter sadaka amount" value="0">
                </div>
                
                <div class="action-buttons">
                    <button class="btn-save" id="saveBtn">
                        <i class="fas fa-save"></i> Save Data
                    </button>
                    <button class="btn-reset" id="resetBtn">
                        <i class="fas fa-redo"></i> Reset
                    </button>
                </div>
            </div>
            
            <div class="summary-section">
                <h2><i class="fas fa-chart-pie"></i> Financial Summary</h2>
                <div class="summary-grid">
                    <div class="summary-item">
                        <div class="label">Total Profit (₹)</div>
                        <div class="value" id="totalProfit">0.00</div>
                    </div>
                    <div class="summary-item zakat">
                        <div class="label">Total Zakat (₹)</div>
                        <div class="value" id="totalZakat">0.00</div>
                    </div>
                    <div class="summary-item sadaka">
                        <div class="label">Total Sadaka (₹)</div>
                        <div class="value" id="totalSadaka">0.00</div>
                    </div>
                    <div class="summary-item">
                        <div class="label">Zakat Rate</div>
                        <div class="rate" id="zakatRateValue">2.5%</div>
                    </div>
                    <div class="summary-item total">
                        <div class="label">Net Profit after Zakat & Sadaka (₹)</div>
                        <div class="value" id="netProfit">0.00</div>
                    </div>
                </div>
                
                <div class="action-buttons">
                    <button class="btn-export" id="exportBtn">
                        <i class="fas fa-download"></i> Export Data
                    </button>
                </div>
            </div>
        </div>
        
        <div class="charts">
            <div class="chart-container">
                <canvas id="profitChart"></canvas>
            </div>
            <div class="chart-container">
                <canvas id="zakatChart"></canvas>
            </div>
        </div>
        
        <h2><i class="fas fa-table"></i> Monthly Data</h2>
        <div class="table-container">
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Profit (₹)</th>
                        <th>Zakat (₹)</th>
                        <th>Sadaka (₹)</th>
                        <th>Net Profit (₹)</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="resultsTable">
                    <!-- Table rows will be generated here -->
                </tbody>
            </table>
        </div>
        
        <footer>
            <p>© 2023 Profit & Zakat Tracker | Open Source | Data is stored in your browser's local storage</p>
        </footer>
    </div>

    <div class="notification" id="notification">Data saved successfully!</div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const currentDateTimeElement = document.getElementById('currentDateTime');
            const currentMonthYearElement = document.getElementById('currentMonthYear');
            const daysGrid = document.querySelector('.days-grid');
            const selectedDateElement = document.getElementById('selectedDate');
            const dailyProfitInput = document.getElementById('dailyProfit');
            const zakatRateInput = document.getElementById('zakatRate');
            const sadakaAmountInput = document.getElementById('sadakaAmount');
            const totalProfitElement = document.getElementById('totalProfit');
            const totalZakatElement = document.getElementById('totalZakat');
            const totalSadakaElement = document.getElementById('totalSadaka');
            const netProfitElement = document.getElementById('netProfit');
            const zakatRateElement = document.getElementById('zakatRateValue');
            const resultsTable = document.getElementById('resultsTable');
            const saveBtn = document.getElementById('saveBtn');
            const resetBtn = document.getElementById('resetBtn');
            const exportBtn = document.getElementById('exportBtn');
            const prevMonthBtn = document.getElementById('prevMonth');
            const nextMonthBtn = document.getElementById('nextMonth');
            const notification = document.getElementById('notification');
            const storageStatusElement = document.getElementById('storageStatus');
            const recordCountElement = document.getElementById('recordCount');
            const whatsappShare = document.getElementById('whatsappShare');
            const telegramShare = document.getElementById('telegramShare');
            const copyLink = document.getElementById('copyLink');
            
            let profitChart = null;
            let zakatChart = null;
            let currentDate = new Date();
            let selectedDate = new Date();
            let financialData = [];
            
            // Initialize the application
            init();
            
            function init() {
                updateDateTime();
                setInterval(updateDateTime, 1000);
                
                loadFinancialData();
                renderCalendar();
                updateSelectedDate();
                updateSummary();
                renderTable();
                updateCharts();
                
                // Set up event listeners
                saveBtn.addEventListener('click', saveData);
                resetBtn.addEventListener('click', resetForm);
                exportBtn.addEventListener('click', exportData);
                prevMonthBtn.addEventListener('click', goToPreviousMonth);
                nextMonthBtn.addEventListener('click', goToNextMonth);
                
                // Set up sharing
                setupSharing();
                
                // Set today as default selected date
                selectDate(new Date());
            }
            
            function setupSharing() {
                const currentUrl = window.location.href;
                const message = "Check out this Profit & Zakat Tracker app!";
                
                // WhatsApp share
                whatsappShare.href = `https://wa.me/?text=${encodeURIComponent(message + ' ' + currentUrl)}`;
                
                // Telegram share
                telegramShare.href = `https://t.me/share/url?url=${encodeURIComponent(currentUrl)}&text=${encodeURIComponent(message)}`;
                
                // Copy link
                copyLink.addEventListener('click', function() {
                    navigator.clipboard.writeText(currentUrl).then(function() {
                        showNotification('Link copied to clipboard!');
                    }, function() {
                        // Fallback for older browsers
                        const textArea = document.createElement('textarea');
                        textArea.value = currentUrl;
                        document.body.appendChild(textArea);
                        textArea.select();
                        document.execCommand('copy');
                        document.body.removeChild(textArea);
                        showNotification('Link copied to clipboard!');
                    });
                });
            }
            
            function updateDateTime() {
                const now = new Date();
                currentDateTimeElement.textContent = now.toLocaleString();
            }
            
            function renderCalendar() {
                const year = currentDate.getFullYear();
                const month = currentDate.getMonth();
                
                currentMonthYearElement.textContent = currentDate.toLocaleString('default', { month: 'long', year: 'numeric' });
                
                // Clear previous days (keep only the day headers)
                const dayHeaders = Array.from(daysGrid.children).slice(0, 7);
                daysGrid.innerHTML = '';
                dayHeaders.forEach(header => daysGrid.appendChild(header));
                
                // Get first day of month and total days
                const firstDay = new Date(year, month, 1).getDay();
                const daysInMonth = new Date(year, month + 1, 0).getDate();
                
                // Add empty cells for days before the first day of the month
                for (let i = 0; i < firstDay; i++) {
                    const emptyCell = document.createElement('div');
                    emptyCell.classList.add('day-cell');
                    emptyCell.classList.add('empty');
                    daysGrid.appendChild(emptyCell);
                }
                
                // Add cells for each day of the month
                const today = new Date();
                for (let day = 1; day <= daysInMonth; day++) {
                    const dayCell = document.createElement('div');
                    dayCell.classList.add('day-cell');
                    dayCell.textContent = day;
                    
                    const cellDate = new Date(year, month, day);
                    
                    // Check if today
                    if (cellDate.toDateString() === today.toDateString()) {
                        dayCell.classList.add('today');
                    }
                    
                    // Check if has data
                    const hasData = financialData.some(item => {
                        const itemDate = new Date(item.date);
                        return itemDate.toDateString() === cellDate.toDateString();
                    });
                    
                    if (hasData) {
                        dayCell.classList.add('has-data');
                    }
                    
                    // Check if selected
                    if (cellDate.toDateString() === selectedDate.toDateString()) {
                        dayCell.classList.add('selected');
                    }
                    
                    dayCell.addEventListener('click', () => selectDate(cellDate));
                    daysGrid.appendChild(dayCell);
                }
            }
            
            function selectDate(date) {
                selectedDate = date;
                updateSelectedDate();
                renderCalendar();
                
                // Load data for selected date if exists
                const dateString = formatDateForStorage(date);
                const existingData = financialData.find(item => item.date === dateString);
                
                if (existingData) {
                    dailyProfitInput.value = existingData.profit;
                    zakatRateInput.value = existingData.zakatRate;
                    sadakaAmountInput.value = existingData.sadaka;
                } else {
                    dailyProfitInput.value = '';
                    sadakaAmountInput.value = '0';
                    zakatRateInput.value = '2.5';
                }
            }
            
            function updateSelectedDate() {
                selectedDateElement.value = selectedDate.toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
            }
            
            function goToPreviousMonth() {
                currentDate.setMonth(currentDate.getMonth() - 1);
                renderCalendar();
            }
            
            function goToNextMonth() {
                currentDate.setMonth(currentDate.getMonth() + 1);
                renderCalendar();
            }
            
            function saveData() {
                const profit = parseFloat(dailyProfitInput.value) || 0;
                const zakatRate = parseFloat(zakatRateInput.value) || 0;
                const sadaka = parseFloat(sadakaAmountInput.value) || 0;
                const zakat = profit * (zakatRate / 100);
                
                if (profit <= 0) {
                    showNotification('Please enter a valid profit amount', false);
                    return;
                }
                
                // Format date for storage (YYYY-MM-DD)
                const dateString = formatDateForStorage(selectedDate);
                
                // Check if data already exists for this date
                const existingIndex = financialData.findIndex(item => item.date === dateString);
                
                if (existingIndex !== -1) {
                    // Update existing data
                    financialData[existingIndex] = {
                        date: dateString,
                        profit: profit,
                        zakatRate: zakatRate,
                        zakat: zakat,
                        sadaka: sadaka,
                        net: profit - zakat - sadaka
                    };
                } else {
                    // Add new data
                    financialData.push({
                        date: dateString,
                        profit: profit,
                        zakatRate: zakatRate,
                        zakat: zakat,
                        sadaka: sadaka,
                        net: profit - zakat - sadaka
                    });
                }
                
                // Save to localStorage
                localStorage.setItem('financialData', JSON.stringify(financialData));
                
                // Update UI
                updateSummary();
                renderTable();
                renderCalendar();
                updateCharts();
                
                showNotification('Data saved successfully!');
            }
            
            function formatDateForStorage(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }
            
            function loadFinancialData() {
                const savedData = localStorage.getItem('financialData');
                if (savedData) {
                    financialData = JSON.parse(savedData);
                    updateRecordCount();
                }
            }
            
            function updateRecordCount() {
                recordCountElement.textContent = financialData.length;
            }
            
            function updateSummary() {
                const totalProfit = financialData.reduce((sum, item) => sum + item.profit, 0);
                const totalZakat = financialData.reduce((sum, item) => sum + item.zakat, 0);
                const totalSadaka = financialData.reduce((sum, item) => sum + item.sadaka, 0);
                const netProfit = totalProfit - totalZakat - totalSadaka;
                
                totalProfitElement.textContent = formatCurrency(totalProfit);
                totalZakatElement.textContent = formatCurrency(totalZakat);
                totalSadakaElement.textContent = formatCurrency(totalSadaka);
                netProfitElement.textContent = formatCurrency(netProfit);
                
                // Use the current zakat rate for display
                zakatRateElement.textContent = `${zakatRateInput.value || 2.5}%`;
            }
            
            function renderTable() {
                resultsTable.innerHTML = '';
                
                // Sort data by date descending
                const sortedData = [...financialData].sort((a, b) => new Date(b.date) - new Date(a.date));
                
                sortedData.forEach(item => {
                    const row = document.createElement('tr');
                    const date = new Date(item.date);
                    
                    row.innerHTML = `
                        <td>${date.toLocaleDateString('en-US', { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' })}</td>
                        <td>${formatCurrency(item.profit)}</td>
                        <td>${formatCurrency(item.zakat)}</td>
                        <td>${formatCurrency(item.sadaka)}</td>
                        <td>${formatCurrency(item.net)}</td>
                        <td>
                            <button onclick="editData('${item.date}')" style="padding: 5px 10px; font-size: 0.8em;"><i class="fas fa-edit"></i></button>
                            <button onclick="deleteData('${item.date}')" style="padding: 5px 10px; font-size: 0.8em; background: #e74c3c;"><i class="fas fa-trash"></i></button>
                        </td>
                    `;
                    
                    resultsTable.appendChild(row);
                });
                
                updateRecordCount();
            }
            
            function editData(dateString) {
                const data = financialData.find(item => item.date === dateString);
                if (data) {
                    const date = new Date(dateString);
                    currentDate = new Date(date);
                    selectedDate = new Date(date);
                    renderCalendar();
                    selectDate(date);
                    dailyProfitInput.value = data.profit;
                    zakatRateInput.value = data.zakatRate;
                    sadakaAmountInput.value = data.sadaka;
                    
                    // Scroll to input section
                    document.querySelector('.input-section').scrollIntoView({ behavior: 'smooth' });
                }
            }
            
            function deleteData(dateString) {
                if (confirm('Are you sure you want to delete this record?')) {
                    financialData = financialData.filter(item => item.date !== dateString);
                    localStorage.setItem('financialData', JSON.stringify(financialData));
                    
                    updateSummary();
                    renderTable();
                    renderCalendar();
                    updateCharts();
                    
                    showNotification('Record deleted successfully!');
                }
            }
            
            function resetForm() {
                dailyProfitInput.value = '';
                zakatRateInput.value = '2.5';
                sadakaAmountInput.value = '0';
            }
            
            function exportData() {
                // Convert data to CSV
                const headers = ['Date', 'Profit (₹)', 'Zakat Rate (%)', 'Zakat (₹)', 'Sadaka (₹)', 'Net Profit (₹)'];
                const csvData = financialData.map(item => [
                    item.date,
                    item.profit,
                    item.zakatRate,
                    item.zakat,
                    item.sadaka,
                    item.net
                ]);
                
                // Add headers
                csvData.unshift(headers);
                
                // Create CSV content
                const csvContent = csvData.map(row => row.join(',')).join('\n');
                
                // Create download link
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.setAttribute('href', url);
                link.setAttribute('download', `profit-zakat-data-${new Date().toISOString().split('T')[0]}.csv`);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                showNotification('Data exported successfully!');
            }
            
            function updateCharts() {
                // Sort data by date ascending for charts
                const sortedData = [...financialData].sort((a, b) => new Date(a.date) - new Date(b.date));
                
                const labels = sortedData.map(item => {
                    const date = new Date(item.date);
                    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
                });
                
                const profitData = sortedData.map(item => item.profit);
                const zakatData = sortedData.map(item => item.zakat);
                const sadakaData = sortedData.map(item => item.sadaka);
                const netData = sortedData.map(item => item.net);
                
                // Cumulative data
                const cumulativeProfit = [];
                const cumulativeZakat = [];
                const cumulativeSadaka = [];
                const cumulativeNet = [];
                
                let profitSum = 0;
                let zakatSum = 0;
                let sadakaSum = 0;
                let netSum = 0;
                
                for (const item of sortedData) {
                    profitSum += item.profit;
                    zakatSum += item.zakat;
                    sadakaSum += item.sadaka;
                    netSum += item.net;
                    
                    cumulativeProfit.push(profitSum);
                    cumulativeZakat.push(zakatSum);
                    cumulativeSadaka.push(sadakaSum);
                    cumulativeNet.push(netSum);
                }
                
                // Destroy existing charts if they exist
                if (profitChart) {
                    profitChart.destroy();
                }
                if (zakatChart) {
                    zakatChart.destroy();
                }
                
                // Create Profit Chart
                const profitCtx = document.getElementById('profitChart').getContext('2d');
                profitChart = new Chart(profitCtx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Daily Profit (₹)',
                                data: profitData,
                                backgroundColor: 'rgba(52, 152, 219, 0.7)',
                                borderColor: 'rgba(52, 152, 219, 1)',
                                borderWidth: 1
                            },
                            {
                                label: 'Cumulative Profit (₹)',
                                data: cumulativeProfit,
                                type: 'line',
                                fill: false,
                                borderColor: 'rgba(46, 204, 113, 1)',
                                tension: 0.1,
                                pointRadius: 3
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Amount (₹)'
                                }
                            }
                        },
                        plugins: {
                            title: {
                                display: true,
                                text: 'Daily and Cumulative Profit'
                            }
                        }
                    }
                });
                
                // Create Zakat & Sadaka Chart
                const zakatCtx = document.getElementById('zakatChart').getContext('2d');
                zakatChart = new Chart(zakatCtx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Zakat (₹)',
                                data: zakatData,
                                backgroundColor: 'rgba(39, 174, 96, 0.7)',
                                borderColor: 'rgba(39, 174, 96, 1)',
                                borderWidth: 1
                            },
                            {
                                label: 'Sadaka (₹)',
                                data: sadakaData,
                                backgroundColor: 'rgba(155, 89, 182, 0.7)',
                                borderColor: 'rgba(155, 89, 182, 1)',
                                borderWidth: 1
                            },
                            {
                                label: 'Cumulative Zakat & Sadaka (₹)',
                                data: cumulativeZakat.map((val, idx) => val + cumulativeSadaka[idx]),
                                type: 'line',
                                fill: false,
                                borderColor: 'rgba(231, 76, 60, 1)',
                                tension: 0.1,
                                pointRadius: 3
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Amount (₹)'
                                }
                            }
                        },
                        plugins: {
                            title: {
                                display: true,
                                text: 'Zakat, Sadaka and Cumulative Contributions'
                            }
                        }
                    }
                });
            }
            
            function formatCurrency(amount) {
                return '₹' + amount.toLocaleString('en-IN', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            }
            
            function showNotification(message, isSuccess = true) {
                notification.textContent = message;
                notification.style.background = isSuccess ? '#2ecc71' : '#e74c3c';
                if (!isSuccess) notification.classList.add('error');
                notification.classList.add('show');
                
                setTimeout(() => {
                    notification.classList.remove('show');
                    notification.classList.remove('error');
                }, 3000);
            }
            
            // Make functions available globally for onclick handlers
            window.editData = editData;
            window.deleteData = deleteData;
        });
    </script>
</body>
</html>